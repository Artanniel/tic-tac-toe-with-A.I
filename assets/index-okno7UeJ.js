(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))d(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const m of o.addedNodes)m.tagName==="LINK"&&m.rel==="modulepreload"&&d(m)}).observe(document,{childList:!0,subtree:!0});function r(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function d(n){if(n.ep)return;n.ep=!0;const o=r(n);fetch(n.href,o)}})();let f="",b="",i="X",a=Array(9).fill(""),v=!1,P=0,x=0,g=!1;const D=document.getElementById("login-screen"),T=document.getElementById("game-screen"),Y=document.getElementById("login-form");document.getElementById("board");const k=document.querySelectorAll(".cell"),q=document.getElementById("player-info"),y=document.getElementById("status"),E=document.getElementById("restart-button"),C=document.getElementById("chat-messages"),l=document.getElementById("chat-input"),h=document.getElementById("send-message"),R=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];Y.addEventListener("submit",async e=>{e.preventDefault(),f=document.getElementById("player-name").value,b=document.getElementById("api-key").value;try{D.classList.add("hidden"),T.classList.remove("hidden"),document.querySelector(".player-name").textContent=f,S()}catch(t){alert("Error initializing game. Please check your API key."),console.error("Error:",t)}});function S(){a=Array(9).fill(""),i="X",v=!0,g=!1,k.forEach(e=>{e.textContent="",e.classList.remove("x","o")}),p(),E.classList.add("hidden"),L(!1)}function p(){q.textContent=`${f} (X) vs A.I. (O)`,y.textContent=i==="X"?g?"Please respond to the A.I. message first!":"Your turn":"A.I. thinking..."}function O(){for(const e of R){const[t,r,d]=e;if(a[t]&&a[t]===a[r]&&a[t]===a[d])return a[t]}return a.includes("")?null:"Draw"}async function F(e){if(!v||a[e]!==""||i!=="X"||g)return;$(e);const t=O();if(t){X(t);return}i="O",p(),await M()}function $(e){a[e]=i;const t=k[e];t.textContent=i,t.classList.add(i.toLowerCase())}function B(){let e="";for(let t=0;t<9;t+=3)e+=a.slice(t,t+3).map(r=>r||" ").join("|")+`
`,t<6&&(e+=`-+-+-
`);return e}function H(){return a.reduce((e,t,r)=>(t===""&&e.push(r),e),[])}function j(e,t=!1){const r=document.createElement("div");r.className=`chat-message ${t?"ai":"player"}`,r.textContent=t?"A.I.: "+e:f+": "+e,C.appendChild(r),C.scrollTop=C.scrollHeight}function L(e){l.disabled=!e,h.disabled=!e,e&&l.focus()}function N(){const e=l.value;j(e||"..."),l.value="",g=!1,L(!1),p()}async function M(e=null){try{const t=H(),r=e!==null?`Your previous move (${e}) was invalid or that position is already taken. Available positions are: ${t.join(", ")}. `:"",d=`
You are playing Tic-tac-toe against ${f}. Make a playful, friendly joke or teasing comment about the game or your opponent's last move.
Keep it light and fun, no more than one or two sentences. Don't be mean or offensive.
Current board state:
${B()}
`,n=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${b}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:d}]}]})});if(!n.ok)throw new Error(`API request failed: ${n.status}`);const o=await n.json();if(!o.candidates||!o.candidates[0]||!o.candidates[0].content||!o.candidates[0].content.parts||!o.candidates[0].content.parts[0])throw new Error("Invalid response format from API");const m=o.candidates[0].content.parts[0].text;return j(m,!0),g=!0,L(!0),p(),new Promise(I=>{const c=()=>{h.removeEventListener("click",c),l.removeEventListener("keypress",s),I()},s=w=>{w.key==="Enter"&&c()};h.addEventListener("click",c),l.addEventListener("keypress",s)}).then(async()=>{const I=`
You are playing Tic-tac-toe. You are O, the opponent is X.
${r}
Current board state:
${B()}
Provide ONLY the index number (0-8) for your next move, where indices are numbered left to right, top to bottom.
Choose the best strategic move to either win or prevent the opponent from winning.
You must choose from these available positions: ${t.join(", ")}.
`,c=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${b}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:I}]}]})});if(!c.ok)throw new Error(`API request failed: ${c.status}`);const s=await c.json();if(!s.candidates||!s.candidates[0]||!s.candidates[0].content||!s.candidates[0].content.parts||!s.candidates[0].content.parts[0])throw new Error("Invalid response format from API");const w=s.candidates[0].content.parts[0].text,u=parseInt(w.trim());if(isNaN(u)||u<0||u>8||a[u]!==""){if(e===null)return await M(u);throw new Error("AI made invalid moves repeatedly")}$(u);const A=O();if(A){X(A);return}i="X",p()})}catch(t){console.error("AI Error:",t),y.textContent="AI error occurred. Please try again.",v=!1,E.classList.remove("hidden")}}function X(e){v=!1,e==="Draw"?y.textContent="It's a draw!":(e==="X"?(P++,document.querySelector(".player-score").textContent=P):(x++,document.querySelector(".ai-score").textContent=x),y.textContent=e==="X"?"You won!":"AI won!"),E.classList.remove("hidden")}k.forEach((e,t)=>{e.addEventListener("click",()=>F(t))});E.addEventListener("click",S);h.addEventListener("click",N);l.addEventListener("keypress",e=>{e.key==="Enter"&&N()});
